/* ----step 1---- */
/* Animate the logo (has id logo) with keyframes.  (Here is a keyframes reference.) It should start at a width of 25px and grow to 475px.  It should also start with an opacity of 0 and end with an opacity of 1. The animation should take 5 seconds and only happen when the page is loaded. **You can complete this step later in the process - it won’t affect the larger views.  */
@keyframes logoAnimation {
    0% { /* start of animation */
      width: 25px;
      opacity: 0; /* opacity 0% */
    }
    100% { /* end of animation */
      width: 475px;
      opacity: 1; /* opacity 100% */
    }
}

/* now add this to the logo with id logo */
/* ??? what does this mean "only happen when the page is loaded."? */
#logo {
    animation: logoAnimation 5s ease-out forwards; /* animation name, duration, timign funct., fill mode (forwards) */
    /* ease-out: Specifies a smooth transition where the animation starts fast and ends slow. */
    /* forwards: Ensures that the final state of the animation (width of 475px and opacity of 1) is maintained after the animation ends. */
}

/* ----step 2---- */
/* Edit the body element to use the Poppins font (using Google fonts) with serif as a backup.  It should also use the image “concrete_seamless.png” as a background-image with a backup color of #f1f1f1. */
body {
    font-family: "Poppins", serif; 
    /* font-weight: 400;
    font-style: normal; from google*/

    background-image: url('../images/concrete_seamless.png');
    /* background-repeat: repeat; */

    background-color: #f1f1f1;
    /* by placing background-color after background-image, this allows for the color to be the "back-up" in case the image doesn't load */
}

/* ----step 3---- */
/* Edit the css for the header tag (all instances) to use flex to match our example. */
header {
    display: flex;
    flex-direction: column; /* have all items in flex box be in one column vs 1 row*/
    align-items: center;
}

/* ----step 4---- */
/* Edit the css for the nav_links class to use flex to match our example. Do not modify the list items or the links - modify the nav_links class to use flex.  */
.nav_links {
    display: flex;
    flex-direction: column; 
    /* ^ was in a row, but shows as a single column in image */


}

/* ----step 5---- */
/* Style the links so that they have the same color even after they have been visited. This is a “challenge” problem. You should not give or receive help when completing it. */
a {
    color: blue;
}
a:visited {
    color: blue; /* Keeps the link color blue even after it is visited */
}

/* ----step 6---- */
/* Identify the proper selector to style ONLY those header elements that are direct children of a card class.  The required styling is the following: 
    background: #288088,
    solid 2px border using #45ADAD,
    20px of padding on the top and the bottom, 
    50px border-radius on the top left and right corners. 
*/
.card > header { /* > targets the child aka the headers within .card class*/
    background: #288088;
    border: solid 2px #45ADAD;
    padding-top: 20px;
    padding-bottom: 20px;
    border-top-left-radius: 50px; /* rounded corners only for top left and right */
    border-top-right-radius: 50px;
}

.card { /* to fix the white part of the card that is showing on top right and left */
    border-top-left-radius: 50px;
    border-top-right-radius: 50px;
}

/* ---- step 7 & 8 ---- */
/* Edit the css for the card class to match our example. Achieve this by using a flex-property to specify an initial “size” of 450px.  You need to think about this from a “flex” perspective and realize that flex-direction will affect the size of the elements.  You can see that in the mobile view they all have the same width. */
/* Edit the css for the pricing class to match our example. You should use flex and the cards should be centered both horizontally and vertically. */
.card {
    flex-basis: 450px; /* Sets the initial width of the card to 450px in the flex container */
}

.pricing{
    display: flex;
    flex-flow: row wrap; /* Aligns items in a row and allows them to wrap to the next line if needed */
    justify-content: center;
}

/* ----step 9---- */
/* Style the images in the gallery class. These elements will have a solid 10px border with a color of #50C7C7, 10px margin on all four sides and a width of 300px.   */
.gallery > img {
    border: 10px solid #50c7c7;
    margin: 10px;
    width: 300px;
}

/* ----step 10---- */
/* Edit the css for the gallery class to use flex to match our example. (You may want to look at the screen shots from 1200px and 1500px as well -  the changes are not from media queries, but from the use of flex.) */
.gallery {
    display: flex;
    flex-wrap: wrap; /* Allows items to wrap onto the next line if needed, but defaults to row direction */
    justify-content: center;
}

/* above 900px */
@media (min-width: 900px) {
    /* ----step 11---- */
    /* Edit the css for the header tag (all instances) and the nav_links class to match our example using flex-properties. The logo should be as far to the left as possible and the links as far to the right as possible. Use flex properties, NOT position properties. */
    header {
        flex-direction: row; /* Aligns flex items in a horizontal row (default direction) */
        justify-content: space-between;
    }
    
    .nav_links {
        flex-direction: row; /* Aligns flex items in a horizontal row (default direction) */
        /* ^ row makes it so all in one line */

    }

    /* ----step 12---- */
    /* Edit the css for the pricing and card classes to match our example. Part of achieving this is by using a flex-property to specify a “size” of 275px. Notice that the elements do not have the same height, but do have the same width. */
    .pricing {
        align-items: flex-end; /* This line aligns the items inside a flex container to the bottom */
    }

    .card {
        flex-basis: 275px; /* Sets the initial main size of the flex item to 275px */
    }

    /* ----step 13---- */
    /* Modify the first header (the one not inside main) so that it remains visible at the top of the screen even as we scroll down. Make sure that it is always visible. You can see an example of this in the video and in the screenshot at 1200px when scrolled. This is a challenge problem. You should not give or receive help when completing it. */
    body > header {
        position: fixed; /* Fixes the element in place relative to the viewport, so it stays visible while scrolling */
        top: 0; /* Positions the element at the top of the viewport */
        width: 100%; /* Makes the element span the full width of the viewport */
        z-index: 1000; /* Ensures the header is above other content */
    }

    body {
        margin-top: 92px; /* based on height of header, not sure how to make this automatic, or if there's another way */
    }
}

/* reduced motion */
/* ----step 14---- */
/* The logo should appear but not be animated if prefers-reduced-motion is selected in the accessibility preferences.  */
@media (prefers-reduced-motion: reduce) {
    #logo {
        animation: none;
        width: 475px;
        opacity: 1;
    }
}

/* The following specifications are for when the page is printed in portrait mode. */
@media print {
    /* ----step 15---- */
    /* Change the font on your body to Arial with a backup value of Helvetica */
    body {
        font-family: Arial, Helvetica;
    }

    /* ----step 16---- */
    /* The background image should be removed. */
    body {
        background-image: none;
    }

    nav {
        width: 100%;
    }

    /* ----step 17---- */
    /* Edit the nav/nav_links elements so that they are spaced according to the image above. */
    .nav_links {
        flex-direction: row;
        justify-content: space-around;
    }

    /* ----step 18---- */
    /* Edit the pricing class so that the elements align along the bottom. As long as it aligns along the bottom we don't care if the cards aren't the same height. */
    .pricing {
        align-items: flex-end;
        flex-wrap: nowrap;
    }

    /* ----step 19---- */
    /* The card elements should have a solid border 2px of #45ADDD and use flex-basis of 325px. */
    .card {
        border: 2px solid #45ADDD;
        flex-basis: 325px;
    }

    /* ----step 20---- */
    /* No part of the gallery should be visible. */
    #gallery {
        visibility: hidden;
    }
    .gallery {
        display: none;
    }

    /* ----step 21---- */
    /* Without using list-style-type add the thumbs up entity as shown in the cards. This is a challenge problem. You should not give or receive help when completing it. */
    .card ul li:nth-child(2)::after {
        content: "\1F44D"; /* Thumbs up emoji */
    }
}